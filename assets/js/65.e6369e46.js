(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{1186:function(v,t,_){"use strict";_.r(t);var i=_(13),e=Object(i.a)({},(function(){var v=this,t=v.$createElement,i=v._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h2",{attrs:{id:"git介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git介绍"}},[v._v("#")]),v._v(" Git介绍")]),v._v(" "),i("p",[v._v("Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGit 可以有效、高速地处理从很小到非常大的项目版本管理，并且因为采用了分布式版本库的方式，不必服务器端软件支持。")]),v._v(" "),i("h3",{attrs:{id:"git的三种状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git的三种状态"}},[v._v("#")]),v._v(" Git的三种状态")]),v._v(" "),i("p",[v._v("Git的文件有三种状态: "),i("strong",[v._v("已提交（committed）")]),v._v("、"),i("strong",[v._v("已修改（modified）")]),v._v(" 和 "),i("strong",[v._v("已暂存（staged）")])]),v._v(" "),i("ul",[i("li",[i("p",[v._v("已修改表示修改了文件，但还没保存到数据库中。")])]),v._v(" "),i("li",[i("p",[v._v("已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")])]),v._v(" "),i("li",[i("p",[v._v("已提交表示数据已经安全的保存在本地数据库中。")])])]),v._v(" "),i("p",[v._v("这会让我们的"),i("code",[v._v("Git")]),v._v("项目拥有三个阶段：工作区、暂存区以及"),i("code",[v._v("Git")]),v._v("目录。")]),v._v(" "),i("p",[i("img",{attrs:{src:_(812),alt:"工作目录、暂存区域以及 Git 仓库"}})]),v._v(" "),i("p",[v._v("工作区是对项目的某个版本独立提取出来的内容。这些从"),i("code",[v._v("Git")]),v._v("仓库的压缩数据库中提取出来的文件,放在磁盘上供你使用或修改。")]),v._v(" "),i("p",[v._v("暂存区是一个文件,保存了下次将要提交的文件列表信息,一般在"),i("code",[v._v("Git")]),v._v("仓库目录中。按照"),i("code",[v._v("Git")]),v._v("的术语叫做“索 引”，不过一般说法还是叫“暂存区”。")]),v._v(" "),i("p",[i("code",[v._v("Git")]),v._v(" 仓库目录是 "),i("code",[v._v("Git")]),v._v(" 用来保存项目的元数据和对象数据库的地方。 这是 "),i("code",[v._v("Git")]),v._v(" 中最重要的部分，从其它计算机克隆 仓库时，复制的就是这里的数据。")]),v._v(" "),i("p",[v._v("基本的 "),i("code",[v._v("Git")]),v._v(" 工作流程如下：")]),v._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[v._v("1. 在工作区中修改文件。\n\n2. 将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。 \n\n3. 提交更新，找到暂存区的文件，将快照永久性存储到 `Git` 目录。 \n")])])]),i("p",[v._v("如果 "),i("code",[v._v("Git")]),v._v(" 目录中保存着特定版本的文件，就属于 "),i("strong",[v._v("已提交")]),v._v(" 状态。 如果文件已修改并放入暂存区，就属于 "),i("strong",[v._v("已暂存")]),v._v(" 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 "),i("strong",[v._v("已修改")]),v._v(" 状态。")]),v._v(" "),i("h2",{attrs:{id:"实用git操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实用git操作"}},[v._v("#")]),v._v(" 实用Git操作")]),v._v(" "),i("ul",[i("li",[i("p",[i("code",[v._v("git commit -a")])]),v._v(" "),i("p",[v._v("直接跳过使用暂存区域也就是跳过 "),i("code",[v._v("git add")]),v._v(" 操作，直接把所有已经跟踪过的文件暂存并提交。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git mv")])]),v._v(" "),i("p",[v._v("就相当于运行了下面三条命令：")]),v._v(" "),i("div",{staticClass:"language-shell line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-shell"}},[i("code",[v._v("$ "),i("span",{pre:!0,attrs:{class:"token function"}},[v._v("mv")]),v._v(" README.md README \n$ "),i("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[v._v("rm")]),v._v(" README.md \n$ "),i("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),v._v(" README \n")])]),v._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[v._v("1")]),i("br"),i("span",{staticClass:"line-number"},[v._v("2")]),i("br"),i("span",{staticClass:"line-number"},[v._v("3")]),i("br")])])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git log -n")])]),v._v(" "),i("p",[v._v("指定显示几次提交记录")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git commit --amend")])]),v._v(" "),i("p",[v._v("有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 --amend 选 项的提交命令来重新提交：")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git reset HEAD <file>")])]),v._v(" "),i("p",[v._v("取消指定文件的暂存状态")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git checkout -- <file>")])]),v._v(" "),i("p",[v._v("撤销对文件的修改")])])]),v._v(" "),i("h3",{attrs:{id:"创建标签"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#创建标签"}},[v._v("#")]),v._v(" 创建标签")]),v._v(" "),i("p",[i("code",[v._v("Git")]),v._v(" 支持两种标签：轻量标签"),i("code",[v._v("（lightweight）")]),v._v("与附注标签"),i("code",[v._v("（annotated）")]),v._v("。")]),v._v(" "),i("p",[v._v("轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。")]),v._v(" "),i("p",[v._v("而附注标签是存储在 "),i("code",[v._v("Git")]),v._v(" 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件 地址、日期时间， 此外还有一个标签信息，并且可以使用 "),i("code",[v._v("GNU Privacy Guard （GPG）")]),v._v("签名并验证。")]),v._v(" "),i("ul",[i("li",[i("p",[i("code",[v._v("git tag <tagname>")])]),v._v(" "),i("p",[v._v("创建轻量标签")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git tag -a <tagname>")])]),v._v(" "),i("p",[v._v("创建附注标签")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git show <tagname>")])]),v._v(" "),i("p",[v._v("显示标签信息")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git push origin <tagname>")])]),v._v(" "),i("p",[v._v("推送指定标签到远程仓库")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git push origin --tags")])]),v._v(" "),i("p",[v._v("推送本地所有标签")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git tag -d <tagname>")])]),v._v(" "),i("p",[v._v("删除本地标签")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git push origin --delete <tagname>")])]),v._v(" "),i("p",[v._v("同步本地删除的标签到远程仓库")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("git config --global alias.co checkout")])]),v._v(" "),i("p",[v._v("可以通过 "),i("code",[v._v("git config")]),v._v(" 文件来轻松地为每一个命令设置一个别名\n上面的例子设置了 "),i("code",[v._v("git co")]),v._v(" 代替 "),i("code",[v._v("git checkou")])])])])])}),[],!1,null,null,null);t.default=e.exports},812:function(v,t,_){v.exports=_.p+"assets/img/Git.778892ba.png"}}]);