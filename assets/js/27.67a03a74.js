(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{1196:function(_,v,t){"use strict";t.r(v);var s=t(13),i=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h1",{attrs:{id:"调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度"}},[_._v("#")]),_._v(" 调度")]),_._v(" "),s("h2",{attrs:{id:"_5-1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-概念"}},[_._v("#")]),_._v(" 5.1 概念")]),_._v(" "),s("p",[_._v("调度：当一个进程等待时，操作系统从进程接管CPU控制，将CPU交给另一个进程，并不断重复")]),_._v(" "),s("p",[_._v("调度程序：将CPU控制交给短期调度程序选择的进程")]),_._v(" "),s("p",[s("strong",[_._v("功能")])]),_._v(" "),s("ul",[s("li",[_._v("切换上下文")]),_._v(" "),s("li",[_._v("切换到用户模式")]),_._v(" "),s("li",[_._v("跳转到用户程序的合适位置，以便重新启动程序")])]),_._v(" "),s("p",[_._v("调度程序要尽可能快，每次进程切换都要使用\n调度程序停止一个进程而启动另一个所需的时间成为调度延迟。")]),_._v(" "),s("p",[s("strong",[_._v("进程调度的时机")])]),_._v(" "),s("ul",[s("li",[_._v("当一个进程从运行状态切换到等待状态时（如I/O请求，或父进程等待子进程终止）")]),_._v(" "),s("li",[_._v("当一个进程从运行状态切换到就绪（抢占式）")]),_._v(" "),s("li",[_._v("当一个进程从等待状态切换到就绪时（抢占式）")]),_._v(" "),s("li",[_._v("当一个进程终止时。")])]),_._v(" "),s("p",[s("strong",[_._v("抢占与非抢占")])]),_._v(" "),s("ul",[s("li",[_._v("抢占式调度：进程运行时可以被操作系统系统以某种原则剥夺其处理机")]),_._v(" "),s("li",[_._v("非抢占式调度：进程主动放弃处理机（阻塞或结束）时才重新调度")])]),_._v(" "),s("h2",{attrs:{id:"_5-2-调度准则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-调度准则"}},[_._v("#")]),_._v(" 5.2 调度准则")]),_._v(" "),s("ul",[s("li",[_._v("CPU的调度率：尽可能的忙碌，理论上0~100%，实际上范围应为40%~90%")]),_._v(" "),s("li",[_._v("吞吐量：单位时间内完成进程的数量")]),_._v(" "),s("li",[_._v("周转时间：进程提交到系统完成的时间")]),_._v(" "),s("li",[_._v("等待时间：进程在就绪队列中等待时间之和")]),_._v(" "),s("li",[_._v("响应时间：进程提交到产生第一响应的时间")])]),_._v(" "),s("h2",{attrs:{id:"_5-3-调度算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-调度算法"}},[_._v("#")]),_._v(" 5.3 调度算法")]),_._v(" "),s("h3",{attrs:{id:"先来先服务算法-first-come-first-served-fcfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先来先服务算法-first-come-first-served-fcfs"}},[_._v("#")]),_._v(" 先来先服务算法（ First-Come，First-Served，FCFS）")]),_._v(" "),s("p",[_._v("先请求CPU的进程被首先分配到CPU，可用FIFO队列来实现")]),_._v(" "),s("p",[_._v("平均周转时间通常"),s("strong",[_._v("相当长")]),_._v("，与进程的"),s("strong",[_._v("提交和调度顺序有关")])]),_._v(" "),s("p",[_._v("FCFS适合长进程，有利于CPU繁忙的进程。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(946),alt:"image-20220322110422246"}})]),_._v(" "),s("h3",{attrs:{id:"短进程优先调度算法-shortest-process-first-spf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短进程优先调度算法-shortest-process-first-spf"}},[_._v("#")]),_._v(" 短进程优先调度算法（ Shortest-Process-First，SPF）")]),_._v(" "),s("p",[_._v("调度取决于进程的下次CPU执行的长度，每次调度时，选择最短CPU执行时间的进程，当两个进程具有同样长度的CPU执行时间，则按照FCFS来处理。")]),_._v(" "),s("p",[_._v("算法易于实现，效率不高，主要弱点是忽视了进程等待时间；会出现饥饿现象。进程所需运行时间不可知。")]),_._v(" "),s("p",[_._v("优点：与FCFS算法相比，短进程优先的算法能有效降低进程的平均等待时间，提高系统的吞吐量。")]),_._v(" "),s("p",[_._v("缺点：对长进程不利、不能保证紧迫进程的及时处理、进程的长度由用户估计而定，可能有偏差。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(947),alt:"image-20220322110908054"}})]),_._v(" "),s("h3",{attrs:{id:"最短剩余时间优先算法-shortest-remaining-time-first-srtf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最短剩余时间优先算法-shortest-remaining-time-first-srtf"}},[_._v("#")]),_._v(" 最短剩余时间优先算法（Shortest-Remaining-time-First, SRTF）")]),_._v(" "),s("p",[_._v("抢占式SPF算法也称为最短剩余时间优先的算法。有新的进程进来时，会将新进程与当前运行进程的尚未完成的CPU执行相比。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(948),alt:"image-20220322112128336"}})]),_._v(" "),s("h3",{attrs:{id:"响应比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应比"}},[_._v("#")]),_._v(" 响应比")]),_._v(" "),s("p",[_._v("FCFS只考虑等候时间而忽视了进程的计算时间，SPF只考虑用户估计的进程计算时间而忽视了进程等待时间。能不能既考虑等待时间有考虑运行时间？")]),_._v(" "),s("p",[s("img",{attrs:{src:t(949),alt:"image-20220322112310019"}})]),_._v(" "),s("p",[_._v("响应比最高者优先算法：既考虑等待时间，又考虑的运行时间")]),_._v(" "),s("ul",[s("li",[_._v("短进程容易得到较高响应比")]),_._v(" "),s("li",[_._v("长进程等待时间足够长后，也将获得足够高的响应比")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(950),alt:"image-20220322125948001"}})]),_._v(" "),s("p",[_._v("每次调度前计算响应比，选值最高的调度执行")]),_._v(" "),s("ul",[s("li",[_._v("A运行完，计算BCD的响应比；")]),_._v(" "),s("li",[_._v("B=(70+50)/50 =2.4；C= (60+10)/10=7；D= (10+20)/20=1.5 ； "),s("strong",[_._v("调度C")])]),_._v(" "),s("li",[_._v("C运行完，计算BD的响应比：")]),_._v(" "),s("li",[_._v("B=(80+50)/50=2.6；D=(20+20)/20=2；"),s("strong",[_._v("先调度B后调度D")])])]),_._v(" "),s("h3",{attrs:{id:"优先级调度算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级调度算法"}},[_._v("#")]),_._v(" 优先级调度算法")]),_._v(" "),s("p",[_._v("每个进程有自己的优先级，最高优先级的进程会分配到CPU，具有相同优先级的进程按FCFS顺序调度。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(951),alt:"image-20220322130402753"}})]),_._v(" "),s("p",[s("strong",[_._v("优先权调度算法的类型")])]),_._v(" "),s("ul",[s("li",[_._v("非抢占式优先权调度算法\n"),s("ul",[s("li",[_._v("高优先权进程一旦得到处理机，便一直运行下去，直到完成或由于某种事件使该进程主动放弃处理机。")]),_._v(" "),s("li",[_._v("即使更高优先权进程到来，也不能剥夺当前进程的CPU使用权，只能在就绪队列中等待。")])])]),_._v(" "),s("li",[_._v("抢占式优先权调度算法\n"),s("ul",[s("li",[_._v("新到达的就绪进程与正在运行进程的优先权相比较，若新到达进程的优先权高于当前正在运行进程的优先权，则系统会抢占CPU，分配给新到达的进程，正在执行的进程暂停执行。")])])])]),_._v(" "),s("p",[s("strong",[_._v("优先权的类型")])]),_._v(" "),s("ul",[s("li",[_._v("根据优先权的变化特点将优先权的类型分为静态优先权和动态优先权。\n"),s("ul",[s("li",[_._v("静态优先权。在创建时确定，在进程的整个运行期间不变。")]),_._v(" "),s("li",[_._v("动态优先权。进程创建时被赋予的优先权，随进程的推进或随其等待时间的增加而改变。")])])])]),_._v(" "),s("p",[s("strong",[_._v("动态优先权调度算法可以使系统获得更好的调度性能")])]),_._v(" "),s("ul",[s("li",[s("p",[_._v("优先权调度算法存在的问题和解决方案")]),_._v(" "),s("ul",[s("li",[s("p",[_._v("无穷阻塞或称饥饿问题。")]),_._v(" "),s("ul",[s("li",[_._v("指就绪态进程因得不到CPU而等待的状态。")])])]),_._v(" "),s("li",[s("p",[_._v("优先权调度算法可能使某个低优先权进程无穷等待。")])]),_._v(" "),s("li",[s("p",[_._v("解决方案：老化（Aging）技术。逐渐增加在系统中等待时间很长进程的优先权。")])])])])]),_._v(" "),s("h3",{attrs:{id:"时间片轮转调度算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间片轮转调度算法"}},[_._v("#")]),_._v(" 时间片轮转调度算法")]),_._v(" "),s("p",[s("img",{attrs:{src:t(952),alt:"image-20220322131504833"}})]),_._v(" "),s("ul",[s("li",[_._v("时间片是一个较小的时间单位，通常为10-100ms。")]),_._v(" "),s("li",[_._v("每当进程在CPU上连续运行的时间等于一个时间片长度时，操作系统在时钟中断处理过程中会抢占CPU，进行进程切换，用新的就绪进程替代当前进程，被替换的当前进程重新回到就绪队列中。")]),_._v(" "),s("li",[_._v("时间片太长，可使多数进程在一个时间片内处理完，可降低进程的周转时间，但可能造成交互用户的响应时间过长。时间片太短，一个进程需经过多次调度才能执行完，会增加进程切换和调度的开销，系统的平均周转时间也较长。")])]),_._v(" "),s("p",[s("strong",[_._v("时间片大小的确定")])]),_._v(" "),s("ul",[s("li",[_._v("系统对响应时间的要求。响应时间越短，时间片取值应该越小。\n"),s("ul",[s("li",[_._v("设系统响应时间为T，进程数目为N，时间片为q，则有T=Nq，即在N一定的情况下，T的大小取决于q。")])])]),_._v(" "),s("li",[_._v("就绪队列中进程的数目。进程越多，响应时间越长。当设定了系统的最长响应时间值后，时间片的大小就与系统允许的最大进程数成反比。")]),_._v(" "),s("li",[_._v("系统的处理能力。必须保证系统支持的基本命令能在一个时间片内执行完。")])]),_._v(" "),s("p",[s("strong",[_._v("时间片轮转调度算法的性能评价")])]),_._v(" "),s("ul",[s("li",[_._v("时间片轮转调度算法的性能依赖于时间片的大小。")]),_._v(" "),s("li",[_._v("时间片越大，与先来先服务算法一样。")]),_._v(" "),s("li",[_._v("时间片越小，会增加CPU用于进程切换和进程调度的开销。")])]),_._v(" "),s("h3",{attrs:{id:"多级队列调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多级队列调度"}},[_._v("#")]),_._v(" 多级队列调度")]),_._v(" "),s("p",[_._v("将就绪队列分成多个单独队列，根据进程属性，如内存大小、进程优先级、进程类型等，一个进程永久分到一个队列。每个队列有自己的调度算法。")]),_._v(" "),s("p",[s("img",{attrs:{src:t(953),alt:"image-20220322131753891"}})]),_._v(" "),s("p",[_._v("有5个队列，优先级由高到低：系统进程、交互进程、交互编辑进程、批处理进程、学生进程；每个队列比更低层的队列具有绝对的优先")]),_._v(" "),s("p",[s("img",{attrs:{src:t(954),alt:"image-20220322131839570"}})]),_._v(" "),s("p",[_._v("采用多级队列调度，降低了进程调度的开销，但对低优先权进程会存在无穷阻塞（饥饿）的问题。多级反馈队列调度算法可以弥补这些不足。")]),_._v(" "),s("p",[_._v("在采用多级反馈队列调度的系统中建立多个优先权不同的就绪队列，为每个队列赋予大小不同的时间片。")]),_._v(" "),s("p",[_._v("有一种反馈策略规定：队列优先权越高，时间片越短。新进程被创建后，先插入预先权最高的队列。仅当高优先权队列空时，才调度优先权次之的队列。同一队列中，采用时间片轮转调度算法。使用CPU时间过多的进程会被移到优先权较低的队列中，在较低优先权队列中等待时间过长的进程会被移动较高优先权队列中，这样就通过使用老化技术阻止了饥饿的发生。")]),_._v(" "),s("ul",[s("li",[_._v("允许进程可以在不同的队列之间迁移")]),_._v(" "),s("li",[_._v("如果进程使用过多的CPU时间，就将其移动到更低的优先级队列上")]),_._v(" "),s("li",[_._v("如果低优先级队列中等待过长的进程会被移动更高的优先级队列中")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(955),alt:"image-20220322132530958"}})]),_._v(" "),s("p",[s("strong",[_._v("多级反馈队列调度算法的设计要考虑以下几个方面的问题")]),_._v("。")]),_._v(" "),s("ol",[s("li",[_._v("就绪队列的数量。")]),_._v(" "),s("li",[_._v("根据进程优先权确定进程应该进入哪个就绪队列的算法。")]),_._v(" "),s("li",[_._v("用以确定进程何时转移到较高优先权队列的算法。")]),_._v(" "),s("li",[_._v("用以确定进程何时转移到较低优先权队列的算法。")]),_._v(" "),s("li",[_._v("用以确定进程在需要服务时应该进入哪个队列的算法。")])]),_._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),s("ul",[s("li",[_._v("先来先服务\n"),s("ul",[s("li",[_._v("实现简单，只考虑进程请求顺序，不考虑进程执行时间")])])]),_._v(" "),s("li",[_._v("最短作业优先\n"),s("ul",[s("li",[_._v("只考虑进程执行时间，不考虑进程等待时间")])])]),_._v(" "),s("li",[_._v("最剩余时间优先\n"),s("ul",[s("li",[_._v("只考虑进程执行时间，不考虑进程等待时间")])])]),_._v(" "),s("li",[_._v("响应比高者优先\n"),s("ul",[s("li",[_._v("既考虑进程执行时间，又考虑进程等待时间")])])]),_._v(" "),s("li",[_._v("优先级调度\n"),s("ul",[s("li",[_._v("按优先级调度")])])]),_._v(" "),s("li",[_._v("时间片轮转\n"),s("ul",[s("li",[_._v("公平性原则")])])]),_._v(" "),s("li",[_._v("多级队列调度\n"),s("ul",[s("li",[_._v("多个队列，队列采用不同调度算法，队列间固定优先级")])])]),_._v(" "),s("li",[_._v("多级反馈队列调度\n"),s("ul",[s("li",[_._v("进程可以在队列中迁移")])])])]),_._v(" "),s("h3",{attrs:{id:"练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[_._v("#")]),_._v(" 练习")]),_._v(" "),s("p",[_._v("假设有如下一组进程，它们的CPU执行时间以ms来计算，进程均在时刻0到达，进程的执行时间和优先级如下表所示：")]),_._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("strong",[_._v("进程")])]),_._v(" "),s("th",[s("strong",[_._v("执行时间")])]),_._v(" "),s("th",[s("strong",[_._v("优先级")])])])]),_._v(" "),s("tbody",[s("tr",[s("td",[_._v("P1")]),_._v(" "),s("td",[_._v("2")]),_._v(" "),s("td",[_._v("2")])]),_._v(" "),s("tr",[s("td",[_._v("P2")]),_._v(" "),s("td",[_._v("1")]),_._v(" "),s("td",[_._v("1")])]),_._v(" "),s("tr",[s("td",[_._v("P3")]),_._v(" "),s("td",[_._v("8")]),_._v(" "),s("td",[_._v("4")])]),_._v(" "),s("tr",[s("td",[_._v("P4")]),_._v(" "),s("td",[_._v("4")]),_._v(" "),s("td",[_._v("2")])]),_._v(" "),s("tr",[s("td",[_._v("P5")]),_._v(" "),s("td",[_._v("5")]),_._v(" "),s("td",[_._v("3")])])])]),_._v(" "),s("p",[_._v("1、分别画出进程采用先来先服务、 短进程优先、非抢占式优先级时进程的执行图")]),_._v(" "),s("p",[_._v("2、并计算出每个进程在上述算法中周转时间和等待时间")]),_._v(" "),s("p",[_._v("3、分析出哪一种算法的平均等待时间最小？哪一种算法的平均周转时间最小")]),_._v(" "),s("h3",{attrs:{id:"公式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公式"}},[_._v("#")]),_._v(" 公式")]),_._v(" "),s("p",[_._v("等待时间 = 开始时间 - 进入时间")]),_._v(" "),s("p",[_._v("周转时间 = 运行时间 + 等待时间")]),_._v(" "),s("p",[_._v("系统的平均周转时间：各个进程的周转时间总和/进程数。")]),_._v(" "),s("p",[_._v("带权周转时间：周转时间/运行时间。")]),_._v(" "),s("p",[_._v("平均带权周转时间：各个进程的带权周转时间总和/进程数。")]),_._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[_._v("#")])])])}),[],!1,null,null,null);v.default=i.exports},946:function(_,v,t){_.exports=t.p+"assets/img/image-20220322110422246.95057ae0.png"},947:function(_,v,t){_.exports=t.p+"assets/img/image-20220322110908054.4add988e.png"},948:function(_,v,t){_.exports=t.p+"assets/img/image-20220322112128336.ceef4a2a.png"},949:function(_,v,t){_.exports=t.p+"assets/img/image-20220322112310019.f67c443b.png"},950:function(_,v,t){_.exports=t.p+"assets/img/image-20220322125948001.2b7f4d50.png"},951:function(_,v,t){_.exports=t.p+"assets/img/image-20220322130402753.b5d0db40.png"},952:function(_,v,t){_.exports=t.p+"assets/img/image-20220322131504833.2acca055.png"},953:function(_,v,t){_.exports=t.p+"assets/img/image-20220322131753891.406baeb5.png"},954:function(_,v,t){_.exports=t.p+"assets/img/image-20220322131839570.54f15714.png"},955:function(_,v,t){_.exports=t.p+"assets/img/image-20220322132530958.5745b583.png"}}]);